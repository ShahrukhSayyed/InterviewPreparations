mongoDB - how to read tables



Introduce yourself
Projects
work on Basic understanding of Angular 

----------------------------------------

Thank you for giving me this opportunity to talk about myself
I am Shahrukh Sayyed, dedicated and energetic individual ,working as Senior Software Developer in Synechron Technologies
I am having 5+ years of experience in the IT Industry.
I think I am versatile individual who is capable to deliver projects like Selection Toool,Update Server, 
Admin Portal while supervising the team of more than 4 people.
Currently I am Working on Selection Tool which is used in the Exit Process of Employee.

I have recieved appreciations from Stake holders and client here for delivering Projects within a timeline.
I am highly enthused about my work and goals . by which I was able to recieved Manager choice awards for 4 times in a row for demonstrating different practices 
in IBM India Pvt Ltd.
I also recieved appreciation from General Manager of Asia continent for delivering extraordinary work towards the Japan Client.
Thats all about myself.

--------------------

tell me about your current project 
Its a Tool used in the selection process of employees who are moving from organization.It is developed with the help of Angular 9, Java, mySql tech stack 
-------------------
Roles of yourself
There are different teams in the project like Backend, Frontend , and Database teams
I am part of frotnend team who is designing and developing the Face of the application.
My responsibilities includes Requirment gathering from Management , 
Planning the activities with the Technical manager,
Design and development of the Frontend,
creating mockups and protypes and get approved from technical head,
helping team memebers to design the database schema., 
helping team members to understand the system requirements of the project/features to develop.


SCSS Advantages
CSS Preprocessor
Loops
Imports
Color Functions - saturate,darken,opacify
If/Else Statements
Extends
Nesting
Variables


===============================================

=================== Javascript ================
Prototyping in 
OOPS concepts
spread => Spreading of elements of an iterable collection (like an array or even a string) into both literal elements and individual function parameters.

rest => Aggregation of remaining arguments into single parameter of variadic functions.
ecma script

closure =>

hoisting => 

object,shallow vs deep copy
arrow function,benefits of it
features of es6
callback


=============== Node ========================
eventloop




===========


palindrome if reverse is equal to original

const reverseString = string.split('').reverse().join('');



===============


array min,max
var min = Math.min( ...arr ),
    max = Math.max( ...arr );



var min = Math.min.apply(null, arr),
    max = Math.max.apply(null, arr);


==============



prime

for (let i = 2; i < number; i++) {
        if (number % i == 0) {
            isPrime = false;
            break;
        }
    }



===============

remove duplicates from array

share the data between two modules - shared service


=========

OOPS concepts
abstraction,encapsulation
overloading,overriding
static constructor vs normal cons which will call first
two interfaces with different implementations having same name which one will be called first
indexOf is for plain substrings, search is for regular expressions.
callbacks in angular


ndgModel deprecated?? two way binding



--------------

Promises 6 static methods
Promise.all ->  promises to execute in parallel and wait until all of them are ready
Promise.all([
  new Promise(resolve => setTimeout(() => resolve(1), 3000)), // 1
  new Promise(resolve => setTimeout(() => resolve(2), 2000)), // 2
  new Promise(resolve => setTimeout(() => resolve(3), 1000))  // 3
]).then(alert); // 1,2,3 when promises are ready: each promise contributes an array member
If any of the promises is rejected, the promise returned by Promise.all immediately rejects with that error.

--------
Promise.allSettled
Promise.allSettled just waits for all promises to settle, regardless of the result. The resulting array has:

{status:"fulfilled", value:result} for successful responses,
{status:"rejected", reason:error} for errors.

---------
Promise.race
Similar to Promise.all, but waits only for the first settled promise and gets its result (or error).

---
Promise.any
Similar to Promise.race, but waits only for the first fulfilled promise and gets its result. If all of the given promises are rejected, 
then the returned promise is rejected with AggregateError – a special error object that stores all promise errors in its errors property.
-------

Promise.resolve
Promise.resolve(value) creates a resolved promise with the result value.

----
Microtask
Asynchronous tasks need proper management. For that, the ECMA standard specifies an internal queue PromiseJobs, 
more often referred to as the “microtask queue” (V8 term).

As stated in the specification:

The queue is first-in-first-out: tasks enqueued first are run first.
Execution of a task is initiated only when nothing else is running.

unhandledrejection is generated when the microtask queue is complete: 
the engine examines promises and, if any of them is in the “rejected” state, then the event triggers.

--------
Async/Await
There’s a special syntax to work with promises in a more comfortable fashion, called “async/await”.
The word “async” before a function means one simple thing: a function always returns a promise. Other values are wrapped in a resolved promise automatically.
await literally suspends the function execution until the promise settles, 
and then resumes it with the promise result. That doesn’t cost any CPU resources, 
because the JavaScript engine can do other jobs in the meantime: execute other scripts, handle events, etc.